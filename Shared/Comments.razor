@using Microsoft.AspNetCore.Identity
@using UserCollectionBlaz.Areas.Identity.Data

@using UserCollectionBlaz.ViewModel
@using System.Diagnostics
@inject IHttpContextAccessor httpAccessor
@inject UserCollectionBlaz.Service.ComService commentsService
@inject UserCollectionBlaz.Service.UserService userService
@inject NavigationManager navigationManager
@inject UserManager<AppUser> userManager
@inject Service.LikeService _likeService
@inject Service.HubService HubService
@inject IJSRuntime JS

<div class="container" style="margin: auto;width:60%;min-width:350px;">
    @if (User is not null)
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto w-100 shadow mb-5 mt-5">
            <img src=@User.AvatarSrc class="d-inline-flex flex-row rounded-circle" data-bs-placement="top" width="64" height="64" alt="Avatar" />
            <div class="d-flex flex-column w-100 ms-3 me-3">
                <div class="ps-3 w-100 mb-2">
                    <div class="d-inline-flex flex-row">
                        <header class="d-inline-flex flex-row">
                            <b>@User.UserName</b><span class="badge bg-success ms-2 mt-1">@User.Level</span>
                        </header>
                    </div>
                </div>

                <textarea id="summerCom" @bind="CurrentContent" placeholder="Enter your comment" class="w-100 mb-2"></textarea>
                <button class="btn btn-outline-success" style="width:150px" @onclick="() => Post()" disabled=@isPosting>Post comment</button>
            </div>
        </div>
    }
    else
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto shadow w-100">
            <p class="comment-text">Log in to leave a comment</p>
        </div>
    }
    @if (_postedComments is null || _postedComments.Count == 0)
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto shadow w-100">
            <p class="comment-text">There are no comments yet</p>
        </div>
    }
    else
    {
        @foreach (Comment comment in _postedComments)
        {
            <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto w-100 shadow mb-2 mt-2">
                <img src=@comment.Autor.AvatarSrc class="d-inline-flex flex-row rounded-circle" data-bs-placement="top" width="64" height="64" alt="Avatar" />
                <div class="ps-3">
                    <div class="d-inline-flex flex-row">
                        <header class="d-inline-flex flex-row">
                            <b>@comment.Autor.UserName</b>
                            <span class="badge bg-success ms-2 mt-1">@comment.Autor.Level</span>
                        </header>
                    </div>
                    <figure>
                        <blockquote class="blockquote">
                            <p>@comment.Content</p>
                        </blockquote>

                        <figcaption class="blockquote-footer">
                            Posted <cite title="Source Title">@comment.PostedTime</cite>
                        </figcaption>
                    </figure>
                </div>
            </div>
        }
    }
</div>

@code {
    private UserVM? User;
    private string? UrlKey;
    private string? CurrentContent;

    private List<Comment> _postedComments = new();
    private List<LikeVM>? _likes = new();
    private bool isPosting;


    protected override async Task OnInitializedAsync()
    {
        UrlKey = navigationManager.Uri.Replace(navigationManager.BaseUri, "");
        _postedComments = (await commentsService.GetAllByKey(UrlKey) ?? new List<Comment>()).OrderByDescending(com => com.PostedTime).ToList();
        User = await userService.GetVM(httpAccessor.HttpContext.User.Identity.Name);
        
    }

    protected override void OnParametersSet()
        => HubService.OnCommentChange += async (comment) =>
            {
                _postedComments.Add(comment);
                await InvokeAsync(StateHasChanged);
            };

//    public async void Receive(Comment 

    private async Task Post()
    {
        Debug.Assert(User is not null);
            await commentsService.Add(
                new Comment()
                {
                    Content = CurrentContent,
                    PlaceUrl = UrlKey,
                    PostedTime = DateTime.Now,
                    Autor = await userManager.FindByNameAsync(User.UserName)
                });
        
        await userService.HavePostedAnotherOne(User);
        CurrentContent = string.Empty;
    }
    
    private void NavigateTo(string userName) => navigationManager.ToAbsoluteUri("profile/" + userName);
}
