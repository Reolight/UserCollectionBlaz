@using Microsoft.AspNetCore.Identity
@using UserCollectionBlaz.Areas.Identity.Data
@using Microsoft.AspNetCore.SignalR.Client
@using UserCollectionBlaz.ViewModel
@inject IHttpContextAccessor httpAccessor
@inject UserCollectionBlaz.Service.ComService commentsService
@inject UserCollectionBlaz.Service.UserService userService
@inject NavigationManager navigationManager
@inject UserManager<AppUser> userManager
@implements IAsyncDisposable


<div class="container">
    @if (User is not null)
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto shadow w-100 mb-5 mt-5">
            <img src=@User.AvatarSrc class="d-inline-flex flex-row rounded-circle" data-bs-placement="top" width="64" height="64" alt="Avatar" />
            <div class="d-flex flex-column">
                <div class="ps-3 w-100">
                    <div class="d-inline-flex flex-row">
                        <header class="d-inline-flex flex-row">
                            <b>@User.UserName</b><span class="badge bg-success ms-2 mt-1">@User.Level</span>
                        </header>
                    </div>
                </div>
                <textarea @bind="CurrentContent" placeholder="Enter your comment" class="w-100"></textarea>
                <button class="btn btn-outline-success" @onclick="() => Post()" disabled=@isPosting>Post comment</button>
            </div>
        </div>
    }
    else
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto shadow w-100">
            <p class="comment-text">Log in to leave a comment</p>
        </div>
    }
    @if (PostedComments is null || PostedComments.Count == 0)
    {
        <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row me-auto shadow w-100">
            <p class="comment-text">There are no comments yet</p>
        </div>
    }
    else
    {
        @foreach (Comment comment in PostedComments)
        {
            <div class="bg-opacity-25 bg-secondary d-inline-flex flex-row shadow w-100 mb-3 mt-3">
                <img src=@comment.Autor.AvatarSrc class="d-inline-flex flex-row rounded-circle" data-bs-placement="top" width="64" height="64" alt="Avatar" />
                <div class="ps-3">
                    <div class="d-inline-flex flex-row">
                        <header class="d-inline-flex flex-row">
                            <b>@comment.Autor.UserName</b>
                            <span class="badge bg-success ms-2 mt-1">@comment.Autor.Level</span>
                        </header>
                    </div>
                    <figure>
                        <blockquote class="blockquote">
                            <p>@comment.Content</p>
                        </blockquote>

                        <figcaption class="blockquote-footer">
                            Posted <cite title="Source Title">@comment.PostedTime</cite>
                        </figcaption>
                    </figure>
                    <div class="d-inline-flex flex-row">
                        <p class="align-middle">0</p>
                        <button type="button" class="btn btn-light">Like</button>
                    </div>
                </div>
            </div>
        }
    }
</div>


@code {
    private UserVM? User;
    private string? UrlKey;
    private string? CurrentContent;
    private HubConnection? hubConnection;
    private List<Comment>? PostedComments = new List<Comment>();
    private bool isPosting;
    private bool isHubConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        UrlKey = navigationManager.Uri.Replace(navigationManager.BaseUri, "");
        PostedComments = commentsService.GetAllByKey(UrlKey)?.ToList() ?? new();
        User = await userService.GetVM(httpAccessor.HttpContext.User.Identity.Name);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/comhub"))
            .Build();
        hubConnection.On<Comment>("RecieveCom", (comment) =>{
            PostedComments.Add(comment);
            PostedComments.OrderByDescending(com => com.PostedTime);
        });

        await hubConnection.StartAsync();
    }

    private async Task Post()
    {
        if (hubConnection is not null)
        {
            Comment comment = new Comment()
                {
                    Autor = await userManager.FindByNameAsync(User.UserName),
                    PlaceUrl = UrlKey,
                    Content = CurrentContent,
                    PostedTime = DateTime.Now
                };
            await hubConnection.SendAsync("PostCom", comment);
            await userService.HavePostedAnotherOne(User);
            CurrentContent = string.Empty;
            commentsService.Add(comment);
            //StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void NavigateTo(string userName) => navigationManager.ToAbsoluteUri("profile/" + userName);
}
