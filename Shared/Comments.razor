@using UserCollectionBlaz.Areas.Identity.Data
@using Microsoft.AspNetCore.SignalR.Client
@using UserCollectionBlaz.ViewModel
@inject IHttpContextAccessor httpAccessor
@inject UserCollectionBlaz.Service.ComService commentsService
@inject UserCollectionBlaz.Service.UserService userService
@inject NavigationManager navigationManager
@implements IAsyncDisposable

<div class="container mt-5">
    <div class="d-flex justify-content-center row">
        <div class="col-md-8">
            <div class="d-flex flex-column comment-section">
                @if (User is not null)
                {
                    <div class="bg-light p-2">
                        <div class="d-flex flex-row align-items-start"><img class="rounded-circle" src=@User.AvatarSrc width="36" height="36" alt=@User.UserName>
                            <textarea class="form-control ml-1 shadow-none textarea" placeholder="Enter your comment here" @bind="CurrentContent">

                            </textarea></div>
                        <div class="mt-2 text-right"><button class="btn btn-primary btn-sm shadow-none" @onclick="Post" type="button">Post comment</button><button class="btn btn-outline-primary btn-sm ml-1 shadow-none" type="button">Cancel</button></div>
                    </div>
                }
                else {
                    <p class="comment-text">Log in to leave a comment</p>
                }
                @foreach (Comment comment in PostedComments)
                {
                    <div class="bg-white p-2">
                        <div class="d-flex flex-row user-info" @onclick="() => NavigateTo(comment.Autor.UserName)">
                                <img class="rounded-circle" alt="none" src=@comment.Autor.AvatarSrc width="40">
                                <div class="d-flex flex-column justify-content-start ml-2">
                                    <span class="d-block font-weight-bold name" data-toggle="tooltip" data-placement="top" title=@string.Format("Lv.{0}\nPosted: {1}", comment.Autor.Level, comment.Autor.PostedTimes)>
                                            @comment.Autor.UserName
                                    </span>
                                    <span class="date text-black-50">
                                        Posted @comment.PostedTime
                                    </span>
                                </div>
                        </div>
                        <div class="mt-2">
                            <p class="comment-text">@comment.Content</p>
                        </div>
                    </div>
                    <div class="bg-white">
                        <div class="d-flex flex-row fs-12">
                            <div class="like p-2 cursor"><i class="fa fa-thumbs-o-up"></i><span class="ml-1">Like</span></div>
                            <div class="like p-2 cursor"><i class="fa fa-commenting-o"></i><span class="ml-1">Comment</span></div>
                            <div class="like p-2 cursor"><i class="fa fa-share"></i><span class="ml-1">Share</span></div>
                        </div>
                    </div>
                }                
            </div>
        </div>
    </div>
</div>

@code {
    private UserVM? User;
    private string? UrlKey;
    private string? CurrentContent;
    private HubConnection? hubConnection;
    private List<Comment>? PostedComments;
    private bool isPosting;
    private bool isHubConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        UrlKey = navigationManager.Uri.Replace(navigationManager.BaseUri, "");
        PostedComments = commentsService.GetAllByKey(UrlKey)?.ToList() ?? new();
        User = await userService.Get(httpAccessor.HttpContext.User.Identity.Name);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/comhub"))
            .Build();
        hubConnection.On<Comment>("RecieveCom", (comment) =>
        {
            PostedComments.Add(comment);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Post()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("PostCom",
                new ComVM()
                    {
                        AutorId = User.UserName,
                        Content = CurrentContent,
                        PlaceUrl = UrlKey
                    });
            CurrentContent = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private void NavigateTo(string userName) => navigationManager.NavigateTo("profile/"+userName);
}
