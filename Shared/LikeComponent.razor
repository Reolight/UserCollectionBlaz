@using UserCollectionBlaz.Service
@using UserCollectionBlaz.Areas.Identity.Data
@using UserCollectionBlaz.ViewModel
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager _navigationManager
@inject LikeService _likeService

<button class="btn btn-outline-success" disabled=@(!_isAuthentificated) @onclick="Liked">
    <div class="d-inline-flex flex-row">
        <p>@_count</p>

        @if (!_isAuthentificated)
        {
            <img src="items/hrt-sol.png" width="16" height="16" alt="L"/>
        }
        else if (_userName is not null && _like.LikedBy.Contains(_userName))
        {
            <img src="items/hrt-sol.png" width="16" height="16" alt="L"/>
            <p>Liked</p>
        }
        else
        {
            <img src="items/hrt.png" width="16" height="16" alt="L"/>
            <p>Like</p>
        }
    </div>
</button>

@code {
        //here must be item type
    [Parameter] public string Location { get; set; }
    private int _count;
    private LikeVM _like;
    private bool _isAuthentificated;
    private string? _userName;

    protected override async Task OnInitializedAsync()
    {
        _like = await _likeService.GetByLocation(Location);
        _count = _like.LikedBy.Count;
        _isAuthentificated = _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated;
        _userName = _httpContextAccessor.HttpContext.User.Identity.Name;
    }

    private async Task Liked()
    {
        if (_userName is null) return;
        _like = await _likeService.Update(_like, _userName);
        _count = _like.LikedBy.Count;
    }
}