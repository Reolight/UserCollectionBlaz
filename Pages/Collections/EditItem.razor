@page "/item/{CollectionId:int}/new"
@page "/item/edit/{CollectionID:int}/{ItemId:int}"
@using UserCollectionBlaz.ViewModel
@using System.Globalization
@using UserCollectionBlaz.Areas.Identity.Data
@inject IHttpContextAccessor httpAccessor
@inject UserCollectionBlaz.Service.CollectionService collectionService
@inject NavigationManager navigationManager
@inject UserCollectionBlaz.Service.CloudinaryService cloudinary;

@attribute [Authorize]

<body>
    <div class="container m-5">
        @if (EditableItem is not null)
        {
            @if (ItemId is null)
            {
                <h3>Add item to @CollectionStorage.Name</h3>
            }
            else
            {
                <h3>Edit item of @CollectionStorage.Name</h3>
            }
            <EditForm Model="@EditableItem" OnValidSubmit="@SaveItem">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="align-items-start d-inline-flex flex-column w-75">
                    <img src=@EditableItem.ImageSrc alt="ItemPic" width="512" /> <!-- IMAGE HERE -->
                    <div class="d-inline-flex flex-column justify-content-start w-100">
                        <label for="formInput19" class="form-label mt-5">Item name</label>
                        <div class="input-group mb-3">
                            <input type="text" @bind=@EditableItem.Name class="form-control" placeholder="Enter item name" aria-label="Item name" aria-describedby="basic-addon1" />
                        </div>

                        <label for="formInput19" class="form-label mt-3">Item description</label>
                        <div class="mb-3">
                            <textarea class="form-control" @bind=@EditableItem.Description id="formInput19" rows="3" placeholder="Tell us about your item"></textarea>
                        </div>

                        <div class="form-floating">
                            <InputFile OnChange="@Upload" class="form-control form-control-lg" placeholder="Image" />
                            <span asp-validation-for="Image" class="text-danger"></span>
                        </div>

                        @if (_tagError.Length > 0)
                        {
                            <div class="alert alert-danger">
                                <p>@_tagError</p>
                            </div>
                        }
                        <div class="flex-row">
                            @foreach (Tag tag in @EditableItem.Tags)
                                                            {
                                                                <div class="btn-group-sm" role="group">
                                                                    <a class="btn btn-outline-primary">@tag.Name</a>
                                                                    <button type="button" class="btn btn-outline-danger" @onclick="() => {EditableItem.Tags.Remove(tag); StateHasChanged(); }">x</button>
                                                                </div>
                                                            }
                                                            
                                <input type="text" class="form-control" list="suggestions" id="suggestions" @bind="_tag" @oninput="Autocompletion" placeholder="Input tags here"/>
                                <datalist id="suggestions">
                                    @foreach (string sug in _Suggestions)
                                        {
                                            <option value=@(sug)/>
                                        }
                                    </datalist>
                        </div>
                        
                        @if (AdditionalValidationErrors.Count > 0){
                            <div class="alert alert-danger" role="alert">
                                <ul>
                                    @foreach (string error in AdditionalValidationErrors){
                                        <li>@error</li>
                                    }
                                </ul>
                            </div>
                        }

                        @if (CollectionStorage.AdditionalFieldsInfo.Count > 0){
                            @foreach (string key in EditableItem.AdditionalFields.Keys)
                            {
                                @switch (CollectionStorage.AdditionalFieldsInfo[key])
                                {
                                    case "int":
                                        <label for=@key>@key</label>
                                        <input class="mb-3" type="number" @bind="EditableItem.AdditionalFields[key]" id=@key name=@key>
                                        break;
                                    case "string":
                                        <label for=@key>@key</label>
                                        <input class="mb-3" type="text" @bind="EditableItem.AdditionalFields[key]" id=@key name=@key>
                                        break;
                                    case "text":
                                        <label for=@key class="form-label mt-3">@key</label>
                                        <div class="mb-3">
                                            <textarea class="form-control" @bind="EditableItem.AdditionalFields[key]" id=@key rows="3"></textarea>
                                        </div>
                                        break;
                                    case "date":
                                        <label for=@key>@key</label>
                                        <input class="mb-3" type="date" @bind="AdditionalDateTimeFields[key]" id=@key name=@key>
                                        break;
                                    case "bool":
                                        <div class="flex-row mb-3">
                                            <input type="checkbox" @bind="AdditionalBooleanFields[key]" id=@key name=@key />
                                            <label for=@key>@key</label>
                                        </div>
                                        break;
                                }
                            }
                        }

                        <button class="btn btn-light" type="submit" disabled=@_isSubmitting>
                            Save item
                        </button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</body>

@code {
    [Parameter] public int CollectionId { get; set; }
    [Parameter] public int? ItemId { get; set; }
    private ItemVM? EditableItem { get; set; }
    private CollectionVM CollectionStorage { get; set; }
    private IBrowserFile Image;
    private string _tag;
    private List<string> AdditionalValidationErrors = new();
    private Dictionary<string, DateTime> AdditionalDateTimeFields = new();
    private Dictionary<string, bool> AdditionalBooleanFields = new();
    private List<string> _Suggestions = new();
    private CancellationToken _cancellationAutocompletion;
    private string _tagError = "";
    
    private bool _searchTagsByStart;
    private bool _isSubmitting;
    private bool _isLoading;
    private bool _wasNull;

    protected override async Task OnInitializedAsync()
    {
        CollectionStorage = await collectionService.GetCollectionVMAsync(CollectionId);
        if (CollectionStorage is null)
            throw new ArgumentNullException("Collection storage is null, but it must have a value! [EditItem:OnInitializedAsync]");
        EditableItem = ItemId is null ?
            new ItemVM(CollectionStorage)
            : (from itma in CollectionStorage.Items where itma.Id == ItemId select itma).FirstOrDefault();
        EditableItem.AdditionalFields.Keys
            .Where(key => CollectionStorage.AdditionalFieldsInfo[key] == "date" || CollectionStorage.AdditionalFieldsInfo[key] == "bool")
            .ToList()
                .ForEach(key => 
                    {
                        switch (@CollectionStorage.AdditionalFieldsInfo[key])
                        {
                            case "date":
                                if (string.IsNullOrEmpty(EditableItem.AdditionalFields[key])) 
                                    EditableItem.AdditionalFields[key] = DateTime.Now.ToString(CultureInfo.CurrentCulture);
                                AdditionalDateTimeFields.Add(key, DateTime.Parse(EditableItem.AdditionalFields[key]));
                                break;
                            case "bool":
                                if (string.IsNullOrEmpty(EditableItem.AdditionalFields[key]))
                                    EditableItem.AdditionalFields[key] = "false";
                                AdditionalBooleanFields.Add(key, bool.Parse(EditableItem.AdditionalFields[key]));
                                break;;
                        }
                    });
        _wasNull = ItemId is null;
        _cancellationAutocompletion = new CancellationToken();
        _Suggestions = await collectionService.GetTagPool();
    }

    private async void SaveItem()
    {
        if (!ValidateAdditionalFields()) return;
        EditableItem.AdditionalFields.Keys
            .Where(key => CollectionStorage.AdditionalFieldsInfo[key] == "date" || CollectionStorage.AdditionalFieldsInfo[key] == "bool")
            .ToList()
            .ForEach(key =>
            {
                EditableItem.AdditionalFields[key] = @CollectionStorage.AdditionalFieldsInfo[key] switch
                {
                    "date" => AdditionalDateTimeFields[key].ToString(CultureInfo.CurrentCulture),
                    "bool" => AdditionalBooleanFields[key].ToString(),
                    _ => EditableItem.AdditionalFields[key]
                    };
            });
        if (Image is not null && Image.Size > 0){
            var imageUploadResult = await cloudinary.AddPhotoAsync(Image);
            EditableItem.ImageSrc = imageUploadResult.Url.ToString();
        }
        if (_wasNull)
        {
            await collectionService.AddItemToCollectionAsync(EditableItem);
        } else {
            await collectionService.EditItemAsync(EditableItem);
        }

        navigationManager.NavigateTo("profile/" + CollectionStorage.Owner);
    }

    private bool ValidateAdditionalFields()
    {
        AdditionalValidationErrors = new();
        if (CollectionStorage.AdditionalFieldsInfo.Count == 0) return true;
        foreach (string key in EditableItem.AdditionalFields.Keys)
        {
            switch (CollectionStorage.AdditionalFieldsInfo[key])
            {
                case "string":
                case "text":            
                    if (string.IsNullOrWhiteSpace(EditableItem.AdditionalFields[key]))
                        AdditionalValidationErrors.Add($"Field {key} must contain a value");
                   break;
                case "int":
                    int i;
                    if (!int.TryParse(EditableItem.AdditionalFields[key], out i))
                        AdditionalValidationErrors.Add(string.Format("{0} is not an integer (field '{1}')", EditableItem.AdditionalFields[key], key));
                    break;
            }
        }

        return AdditionalValidationErrors.Count == 0;
    }

    private void Upload(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        Image = e.File;
        _isLoading = false;
    }

    private bool ValidateTagInput(string val)
    {
        _tagError = "";
        if (val.Length < 4)
            _tagError += "Length is too small. ";
        if (val.IndexOfAny("!@#$%^&*()+/.,|\\\"';:{[]}`~№? 0123456789".ToCharArray()) != -1)
            _tagError += "Tag input contains prohibited symbols. Use symbols only. ";
        if (EditableItem.Tags.Select(tag => tag.Name).ToList().Contains(val.TrimEnd()))
            _tagError += "This tag is already added";
        return string.IsNullOrEmpty(_tagError);
    }

    private async Task AddTag(string putted)
    {
        Tag toAdd = collectionService.GetTagFromPool(putted) ?? await collectionService.CreateNewTag(putted);
        EditableItem.Tags.Add(toAdd);
        _tag = "";
    }
    
    private async Task Autocompletion(ChangeEventArgs args)
    {
        string putted = args.Value.ToString();
        if (!string.IsNullOrWhiteSpace(putted) && ValidateTagInput(putted.TrimEnd()))
        {
            if (putted[^1] == ' ')
                await AddTag(putted.TrimEnd());

            StateHasChanged();
        }
    }
}
