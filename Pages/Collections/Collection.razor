@using Microsoft.AspNetCore.Identity
@using UserCollectionBlaz.Areas.Identity.Data
@using UserCollectionBlaz.ViewModel
@using Microsoft.JSInterop
@inject UserManager<AppUser> userManager
@inject IHttpContextAccessor httpAccessor
@inject Service.CollectionService collectionService
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<div class="bg-gradient mb-3 mt-3 bg-opacity-25 bg-secondary container shadow flex-row ">
    <div class="d-inline-flex flex-row">
        <div class="col">
            <span class="align-bottom">
                <a class="nav-item" href=@($"/collection/{collection.Id}")>
                @if (collection.IsPrivate)
                {
                    <h4 class="ps-5"><i>@collection.Name</i></h4>
                }
                else
                {
                    <h4 class="d-inline-block flex-row ps-1">@collection.Name</h4>
                }
                </a>
            </span>
        </div>
        <div class="col-6">
            <cite class="ps-1">by @collection.Owner</cite>
            <img class="ps-1" src="items/hrt-sol.png" width="16" height="16"/>@collection.Likes
            <a class="ps-1" role="button" data-bs-toggle="collapse" href=@($"#collapse{collection.Id}") aria-expanded="False" aria-controls="@($"collapse{collection.Id}")">Collapse</a>
        </div>
        <div class="col">
            <div class="btn-group flex-row-reverse" role="group">
                @if (_isOwner)
                {
                    <button type="button" class="btn btn-warning" @onclick="() => ToEditCollection(collection.Id)">Edit</button>
                }
                <a type="button" class="btn btn-primary" href=@($"/collection/{collection.Id}")>View</a>
                @if (_isOwner)
                {
                    <button type="button" class="btn btn-danger" @onclick="RemoveCollection">Delete</button>
                }
            </div>
            </div>
        
    </div>
    <div class="collapse" id="@($"collapse{collection.Id}")">
        <div class="mb-1 mt-1">
            <p>@((MarkupString)collection.Description)</p>
        </div>
        @foreach (ItemVM item in collection.Items)
        {
            <div class="card container-sm d-sm-inline-flex flex-column mw-100" style=@($"width: {_dimension.Width}px")>
                <div @onclick="() => ToViewItem(item.Id)">
                    <img class="card-img-top" src=@item.ImageSrc alt=@item.Name/>
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@((MarkupString)item.Description)</p>
                    </div>
                    @foreach (string field in item.AdditionalFields.Keys)
                    {
                        <p class="card-text">@field - @item.AdditionalFields[field]</p>
                    }

                    <div class="flex-row">
                        @foreach (Tag tag in item.Tags)
                        {
                            <TagComponent TagItem=@tag />
                        }
                    </div>
                </div>

                <div class="d-inline-flex flex-row">
                    @if (_isOwner)
                    {
                        <a type="button" class="btn btn-primary" href=@($"/item/edit/{collection.Id}/{item.Id}")>Edit</a>
                    }
                    <LikeComponent Location=@($"item-{item.Id}") />
                    @if (_isOwner)
                    {
                        <button type="button" class="btn btn-primary"
                                @onclick="() => RemoveItem(item.Id)">Delete</button>
                    }
                    <br/>

                </div>
            </div>
        }
        @if (_isOwner)
        {
            <div class="card d-inline-flex d-sm-inline-flex flex-column mw-100 start-0 w-25">
                <img class="card-img-top" alt="Add another item"/>
                <div class="card-body">
                    <button @onclick="ToCreateItem" class="btn btn-primary">Add</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public CollectionVM collection { get; set; }
    [Parameter] public AppUser? CurrentUser { get; set; }
    [Parameter] public bool editable { get; set; }
    private bool _isOwner;
    private BrowserDimension _dimension = new();

    public class BrowserDimension
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    protected override void OnInitialized()
    {
        _isOwner = CurrentUser is not null && CurrentUser.UserName == collection.Owner;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _dimension = await JsRuntime.InvokeAsync<BrowserDimension>("getDimensions");
        _dimension.Width = (int)(_dimension.Height * 0.9 / 4);
        if (_dimension.Width / 4 < 300) _dimension.Width = 300;
        StateHasChanged();
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void RemoveCollection() 
    { 
        await collectionService.RemoveCollectionAsync(collection); 
        StateHasChanged(); 
    }

    private void ToEditCollection(int id) => navigationManager.NavigateTo("/collection/edit/" + id);
    private void ToViewItem(int id) => navigationManager.NavigateTo($"/item/{collection.Id}/{id}");
    private void ToCreateItem() => navigationManager.NavigateTo($"item/{collection.Id}/new");

           private void RemoveItem(int id) =>
        collectionService.RemoveItemFromCollectionAsync(
            collection,
            collection.Items.Find(itma => itma.Id == id));
    
    public class BrowserService
    {
        private readonly IJSRuntime _js;

        public BrowserService(IJSRuntime js)
        {
            _js = js;
        }
    }
}