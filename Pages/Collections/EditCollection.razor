@page "/collection/new"
@page "/collection/edit/{CollectionID:int}"

@using UserCollectionBlaz.ViewModel
@inject IHttpContextAccessor httpAccessor
@inject Service.CollectionService collectionService
@inject NavigationManager navigationManager

@attribute [Authorize]

@if (CollectionID is null) {
        <h3>Add collection</h3>
      } else {
          <h3>Edit collection</h3>
      }

<body>
        <div class="container m-5">
            @if (EditableCollection is not null)
            {
                <EditForm Model="@EditableCollection" OnValidSubmit="@SaveCollection">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                <div class="align-items-start d-inline-flex flex-column w-75">
                    <div class="d-inline-flex flex-column justify-content-start w-100">
                        <label for="formInput19" class="form-label mt-5">Collection name</label>
                        <div class="input-group mb-3"> 
                            <input type="text" @bind="EditableCollection.Name" class="form-control" placeholder="Collection name" aria-label="Collection name" aria-describedby="basic-addon1"/> 
                        </div>

                        <label for="formInput19" class="form-label mt-5">Collection type</label>
                        <div class="input-group mb-3">
                            <input type="text" @bind="EditableCollection.ItemType" class="form-control" placeholder="Collection type" aria-label="Collection type" aria-describedby="basic-addon1" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label mt-3">Collection description</label>
                            <RadzenHtmlEditor @bind-value="@EditableCollection.Description" style="height: 400px; margin-bottom: 1rem;" />
                        </div>

                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="EditableCollection.IsPrivate" value="" id="flexCheckDefault"/>
                            <label class="form-check-label" for="flexCheckDefault">
                                Is private
                            </label>
                        </div>
                        <p class="mb-2 mt-2">Fill rules for additional fields. Examples of additional fields:</p>
                        <ul>
                            <li><b><abbr title="Short text">String:</abbr></b> Autor</li>
                            <li><b><abbr title="Day, month and year">Date:</abbr></b> Published date</li>
                            <li><b><abbr title="Can be FALSE or TRUE">Boolean:</abbr></b> Available</li>
                            <li><b><abbr title="Long text">Text:</abbr></b> Description</li>
                            <li><b><abbr title="Integer number: 1, 2, 3...">Integer:</abbr></b> Volumes</li>
                        </ul>
                        @foreach (string key in EditableCollection.AdditionalFieldsInfo.Keys){
                    <div class="input-group mb-3">
                                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">@EditableCollection.AdditionalFieldsInfo[key]</button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" @onclick="() => EditableCollection.AdditionalFieldsInfo[key]=FieldTypes[0]">String</a>
                            </li>
                            <li>
                                    <a class="dropdown-item" @onclick="() => EditableCollection.AdditionalFieldsInfo[key]=FieldTypes[1]">Text</a>
                            </li>
                            <li>
                                    <a class="dropdown-item" @onclick="() => EditableCollection.AdditionalFieldsInfo[key]=FieldTypes[3]">Number</a>
                            </li>
                            <li>
                                    <a class="dropdown-item" @onclick="() => EditableCollection.AdditionalFieldsInfo[key]=FieldTypes[2]">Boolean</a>
                            </li>
                            <li>
                                    <a class="dropdown-item" @onclick="() => EditableCollection.AdditionalFieldsInfo[key]=FieldTypes[4]">Date</a>
                            </li>
                        </ul>
                        <input type="text" class="form-control" disabled="disabled" value="@key"
                           aria-label="Text input with dropdown button" />
                        <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveField(key)">🗙</button>
                    </div>
                    }
                    @if (!string.IsNullOrEmpty(AdditionalFieldsErrors))
                    {
                        <div class="alert alert-danger" role="alert">
                            @AdditionalFieldsErrors
                        </div>
                    }

                        <div class="input-group mb-3">
                            <button type="button" class="btn btn-outline-primary" @onclick="KeyPressed">Add: @NewAdditionalFieldType</button>
                            <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                            </button>
                            <ul class="dropdown-menu">
                                <li>
                                    <button type="button" class="dropdown-item" @onclick="() => ChangeNewFieldType(0)">String</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item" @onclick="() => ChangeNewFieldType(1)">Text</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item" @onclick="() => ChangeNewFieldType(3)">Number</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item" @onclick="() => ChangeNewFieldType(2)">Boolean</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item" @onclick="() => ChangeNewFieldType(4)">Date</button>
                                </li>
                            </ul>
                            <input type="text" class="form-control" @bind=@NewAdditionalFieldName
                                aria-label="Text input with dropdown button" placeholder="Choose type of the field and enter name of field here"/>
                        </div>
                        <button class="btn btn-light" type="submit" disabled=@_isSubmitting>
                            Save collection
                        </button>
                    </div>
                </div>
            </EditForm>
            }
        </div>
</body>

@code {
    [Parameter] public int? CollectionID { get; set; }
    public CollectionVM EditableCollection { get; set; }
    //[Parameter] public EventCallback<bool> OnFinished { get; set; }
    private bool _isLoading;
    private bool _isSubmitting;
    private bool _wasNull;
    private string? UserName { get; set; }

    private string[] FieldTypes = { "string", "text", "bool", "int", "date" };
    private string? NewAdditionalFieldType;
    private string? NewAdditionalFieldName;

    private string AdditionalFieldsErrors;

    protected override async Task OnInitializedAsync()
    {
        UserName = httpAccessor.HttpContext.User.Identity.Name;
        if (CollectionID is not null) EditableCollection = await collectionService.GetCollectionVMAsync(CollectionID, UserName, true);
        _wasNull = EditableCollection is null;
        EditableCollection ??= new() { Owner = UserName, AdditionalFieldsInfo = new () };
    }

    private bool NewFieldValidation(){
        AdditionalFieldsErrors = "";
        AdditionalFieldsErrors += string.IsNullOrEmpty(NewAdditionalFieldType)? "New field must have a type! " : "";
        AdditionalFieldsErrors += string.IsNullOrEmpty(NewAdditionalFieldName)? "New field must have a name!" : "";
        return string.IsNullOrEmpty(AdditionalFieldsErrors);
    }

    private void KeyPressed(){
        if (NewFieldValidation())
        {
            EditableCollection.AdditionalFieldsInfo.Add(NewAdditionalFieldName, NewAdditionalFieldType);
            NewAdditionalFieldName = NewAdditionalFieldType = "";
        }
    }

    private void RemoveField(string key) => EditableCollection.AdditionalFieldsInfo.Remove(key);

    private async void SaveCollection(){
        _isSubmitting = true;
        if (EditableCollection is null) return;
        if (_wasNull){
            await collectionService.AddCollectionAsync(EditableCollection);
        } else {
            await collectionService.EditCollectionAsync(EditableCollection);
        }

        navigationManager.NavigateTo("profile/" + EditableCollection.Owner);
        _isSubmitting = false;
    }
    
    private void ChangeNewFieldType(byte type){
        NewAdditionalFieldType = FieldTypes[type]; 
        InvokeAsync(StateHasChanged);
    }
}
