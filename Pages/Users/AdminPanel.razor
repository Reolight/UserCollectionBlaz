@page "/account/users"
@using UserCollectionBlaz.Areas.Identity.Data
@using UserCollectionBlaz.ViewModel
@inject Service.UserService userServ;
@inject IHttpContextAccessor httpAccessor;
@inject NavigationManager navigationManager;

<link rel="stylesheet" href="css/Index.css"/>
<div class="text-center">
    <h2 class="display-4">User panel</h2>
    <br />
    <table class="table table-striped">
        <tr>
            <th>User name</th>
            <th>Posted times</th>
            <th>Level</th>
            @if (CurrentUser is not null && CurrentUser.IsAdmin)
            {
                <th>Email</th>
                <th>Admin status control</th>
            }
        </tr>
        @if (Users is not null && Users.Count > 0)
        {
            @foreach(AppUser user in Users)
            {
                <tr style=@(user.IsBlocked ? "background: #dfc2c4" : user.IsAdmin ? "background: darkseagreen" : "color: black")>
                    <td class="d-flex d-inline">
                        <img class="rounded-circle" src=@user.AvatarSrc width="32" height="32"/>
                        <a class="nav-item" href=@($"/profile/{user.UserName}")>@user.UserName</a>
                    </td>
                    <td>@user.PostedTimes</td>
                
                    @if (CurrentUser is not null && CurrentUser.IsAdmin)
                    {
                        <input type="number" @bind="user.Level"/>
                        <button class="btn btn-danger" @onclick="() => { userServ.UpdateLevel(user.UserName, user.Level); InvokeAsync(StateHasChanged);}">
                            Save
                        </button>
                        <td>@user.Email</td>
                        <td>
                            @if (user.IsAdmin)
                            {
                                <button class="btn btn-outline-dark" @onclick="() => { AdminChange(user.UserName); if (CurrentUser.UserName == user.UserName) InvokeAsync(StateHasChanged); }">
                                    Deadminilize
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-outline-danger" @onclick="() => AdminChange(user.UserName)">
                                    Adminilize
                                </button>
                            }
                            <button style="color: black" class="btn btn-danger" @onclick="() => Ban(user.UserName)">
                                @if (user.IsBlocked)
                                {
                                    <p>@user.BannedSince.Add(user.BanLasts).ToString("g")</p>
                                }
                                else
                                {
                                    <p>Ban</p>
                                }
                            </button>
                        </td>
                    }
                    else
                    {
                        <td>@user.Level</td>
                    }
                </tr>
            }
        }
        else 
        {
            <tr><td colspan=3>There are no users</td></tr>
        }
    </table>
</div>

@code {
    private List<AppUser>? Users;
    private UserVM? CurrentUser;
    private string ColorProperty;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = await userServ.GetVM(httpAccessor.HttpContext.User.Identity.Name);
        Users = new List<AppUser>(userServ.GetAll());
    }

    private void NavigateTo(string name) => navigationManager.ToAbsoluteUri("profile/" + name);

    private async void AdminChange(string name){
        var result = await userServ.AdminPowerChange(name);
        if (result)
        {
            StateHasChanged();
        }
    }

    private async void Ban(string name){
        var result = await userServ.BanHummer(name);
        if (result){
            StateHasChanged();
        }
    }
}
