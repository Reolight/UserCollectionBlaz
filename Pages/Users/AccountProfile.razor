@page "/profile/{name}"
@using UserCollectionBlaz.Service
@using UserCollectionBlaz.Areas.Identity.Data
@using UserCollectionBlaz.ViewModel
@using UserCollectionBlaz.Pages.Collections
@inject IHttpContextAccessor httpAccessor;
@inject UserService userServ;
@inject CloudinaryService cloudinary;
@inject CollectionService collectionService

@if (user is null)
{
    <div class="alert alert-danger" role="alert">
        <h2>This user is not accessible</h2>
    </div>
}
else
{
    
    <div class="card sidebar d-inline-flex d-sm-inline-flex flex-column mw-100 start-0 w-25">
        <p class="flex-row"><b>@user.UserName</b>
            <span class="badge bg-success ms-2 mt-1"> Lv. @user.Level</span>
        </p>
        <div class="card" style="width: 18rem;">
            <img src=@user.AvatarSrc class="card-img-top rounded-circle" alt="..." width="120">
            <div class="card-body">
                @if(_isOwner){
                <button type="button" class="btn btn-outline-dark" @onclick="EditModeSwitch">
                    Edit profile
                </button>
                }
            </div>
        </div>

        <div class="progress">
            <div class="progress-bar" role="progressbar" style=@StyleWidth 
                 aria-valuenow=@user.PostedTimes aria-valuemin=@UserVM.GetMinPostForThisLevel(user.Level)
                 aria-valuemax=@(UserVM.GetMaxPostForNewLevel(user.Level) -  UserVM.GetMinPostForThisLevel(user.Level))></div>
        </div>
        <p>@(user.PostedTimes - UserVM.GetMinPostForThisLevel(user.Level))/@(UserVM.GetMaxPostForNewLevel(user.Level) -  UserVM.GetMinPostForThisLevel(user.Level))</p>
    </div>

    @if (_isEditState){
        if (errors is not null){
            foreach (string error in errors){
                <div class="alert alert-danger" role="alert">
                    @error
                </div>
            }
        }

        <div class="form-row form-group col-md-4 mx-auto">
            <div class="form-floating">
                <InputFile OnChange="@Upload" class="form-control form-control-lg" placeholder="Image" />
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input @bind="EditUserData.UserName" class="form-control" autocomplete="username" aria-required="true" />
                <label @bind="EditUserData.UserName"></label>
                <span asp-validation-for="EditUserData.UserName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input @bind="EditUserData.Email" class="form-control" autocomplete="email" aria-required="true" />
                <label @bind="EditUserData.Email"></label>
                <span asp-validation-for="EditUserData.Email" class="text-danger"></span>
            </div>

            <button class="btn btn-outline-success" disabled=@(_isValidating || _isLoading) @onclick="SaveChanges">
                Apply
            </button>
        </div>
    }

    @if (!_isEditing)
    {
        if (collections is null || collections.Count == 0)
        {
            <div class="bg-gradient bg-opacity-25 bg-secondary container shadow">
                <h4 class="ps-5">There are no collections</h4>
            </div>
        }
        else
        {
            @foreach (CollectionVM collection in collections)
            {
                <Collection collection=@collection CurrentUserName=@(LoggedUser is null? "" : LoggedUser.UserName) />
            }
        }

        @if (_isOwner)
        {
            <a class="btn btn-outline-primary" href="/collection/new">
                Add collection
            </a>
        }
    }
}

@code {
    [Parameter] public string? name { get; set; }
    private List<string> errors;
    private AppUser? user;
    private bool _isOwner;
    private string? UrlImg;
    private string? StyleWidth;
    private UserVM? LoggedUser;
    private UserVM? EditUserData;
    private IBrowserFile Image;
    private List<CollectionVM>? collections;

    private bool _isValidating;
    private bool _isEditState;
    private bool _isReady;
    private bool _isLoading;
    private bool _isEditing;

    protected override async Task OnInitializedAsync()
    {
        LoggedUser = httpAccessor.HttpContext?.User.Identity is null ? null : 
            await userServ.GetVM(httpAccessor.HttpContext.User.Identity.Name);
        name ??= LoggedUser.UserName;
        if (!string.IsNullOrEmpty(name)){
            user = userServ.GetHeavyUser(name);
            _isOwner = LoggedUser is not null && (LoggedUser.UserName.ToLower() == user.UserName.ToLower() || LoggedUser.IsAdmin);
            StyleWidth =
                $"width: {(int)((double)(user.PostedTimes - UserVM.GetMinPostForThisLevel(user.Level)) / (UserVM.GetMaxPostForNewLevel(user.Level) -  UserVM.GetMinPostForThisLevel(user.Level)) * 100)}%";
            collections = await collectionService.GetCollectionVMsByAutor(name, _isOwner) ?? new();
        }
    }

    private async Task SaveChanges()
    {
        _isValidating = true;
        var imageUploadResult = await cloudinary.AddPhotoAsync(Image);
        var res = await userServ.Update(new UserVM
            {
                UserName = EditUserData.UserName,
                Email = EditUserData.Email,
                AvatarSrc = imageUploadResult.Url.ToString()
        });

        if (!res.Succeeded){
            errors = res.Errors.Select(er => er.Description).ToList();
        }
        else {
            EditModeSwitch();
        }

        _isValidating = false;
    }

    private void EditModeSwitch()
    {
        errors = new();
        _isEditState = !_isEditState;
        if (_isEditState){
            EditUserData = new();
            EditUserData = new UserVM(user);
        }
        
        StateHasChanged();
    }

    private void Upload(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        Image = e.File;
        _isLoading = false;
    }
}
