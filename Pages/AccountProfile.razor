@page "/profile/{name}"
@using UserCollectionBlaz.ViewModel;
@inject IHttpContextAccessor httpAccessor;
@inject UserCollectionBlaz.Service.UserService userServ;
@inject UserCollectionBlaz.Service.CloudinaryService cloudinary;
@inject IWebHostEnvironment Environment

@if (user is null)
{
    <div class="alert alert-danger" role="alert">
        <h2>This user is not accessible</h2>
    </div>
}
else
{
    <p><b>@user.UserName</b></p>
    <div class="card" style="width: 18rem;">
        <img src=@user.AvatarSrc class="card-img-top rounded-circle" alt="..." width="120">
        <div class="card-body">
            @if(_isOwner){
            <button type="button" class="btn btn-outline-dark" @onclick="EditModeSwitch">
                Edit profile
            </button>
            } 
            else if (!string.IsNullOrEmpty(LoggedUserName))
            {
                <button class="btn btn-outline-success">Laik</button>
            }
        </div>
    </div>

    <p> Level Lv.@user.Level</p>
    <div class="progress">
      <div class="progress-bar" role="progressbar" style=@StyleWidth aria-valuenow=@user.PostedTimes aria-valuemin=@MinPostsForCurrentLevel aria-valuemax=@PostToNewLevel></div>
    </div>
    <p>@(user.PostedTimes - MinPostsForCurrentLevel)/@PostToNewLevel</p>

    @if (_isEditState){
        if (errors is not null){
            foreach (string error in errors){
                <div class="alert alert-danger" role="alert">
                    @error
                </div>
            }
        }

        <div class="form-row form-group">
            <div class="form-floating">
                <InputFile OnChange="@Upload" class="form-control form-control-lg" placeholder="Image" />
                <span asp-validation-for="Image" class="text-danger"></span>
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-floating">
                <input @bind="EditUserData.UserName" class="form-control" autocomplete="username" aria-required="true" />
                <label @bind="EditUserData.UserName"></label>
                <span asp-validation-for="EditUserData.UserName" class="text-danger"></span>
            </div>
            <div class="form-floating">
                <input @bind="EditUserData.Email" class="form-control" autocomplete="email" aria-required="true" />
                <label @bind="EditUserData.Email"></label>
                <span asp-validation-for="EditUserData.Email" class="text-danger"></span>
            </div>

            <button class="btn btn-outline-success" disabled=@(_isValidating || _isLoading) @onclick="SaveChanges">
                Apply
            </button>
        </div>
    }
}

@code {
    [Parameter] public string? name { get; set; }
    private List<string> errors;
    private UserVM? user;
    private bool _isOwner;
    private string? UrlImg;
    private int PostToNewLevel;
    private int MinPostsForCurrentLevel;
    private string? StyleWidth;
    private string? LoggedUserName;
    private UserVM? EditUserData;
    private IBrowserFile Image;

    private bool _isValidating;
    private bool _isEditState;
    private bool _isReady;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        LoggedUserName = httpAccessor.HttpContext.User.Identity.Name;
        name ??= LoggedUserName;
        if (!string.IsNullOrEmpty(name)){
            user = await userServ.Get(name);
            _isOwner = LoggedUserName is null? false : LoggedUserName.ToLower().Equals(user.UserName.ToLower());
            PostToNewLevel = (int)(10 * Math.Pow(1.2, user.Level));
            MinPostsForCurrentLevel = user.Level <= 1 ? 0 : (int)(10 * Math.Pow(1.2, user.Level - 1));
            StyleWidth = string.Format("width: {0}%", (int)((double)(user.PostedTimes - MinPostsForCurrentLevel) / PostToNewLevel * 100));
        }
    }

    private async Task SaveChanges()
    {
        _isValidating = true;
        var imageUploadResult = await cloudinary.AddPhotoAsync(Image);
        var res = await userServ.Update(new UserVM
            {
                UserName = EditUserData.UserName,
                Email = EditUserData.Email,
                AvatarSrc = imageUploadResult.Url.ToString()
        });

        if (!res.Succeeded){
            errors = res.Errors.Select(er => er.Description).ToList();
        }
        else {
            EditModeSwitch();
        }

        _isValidating = false;
    }

    private void EditModeSwitch()
    {
        errors = new();
        _isEditState = !_isEditState;
        if (_isEditState){
            EditUserData = new();
            EditUserData = (UserVM) user.Clone();
        }
    }

    private void Upload(InputFileChangeEventArgs e)
    {
        _isLoading = true;
        Image = e.File;
        _isLoading = false;
    }
}
